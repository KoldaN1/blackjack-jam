import logger from '../models/logger.js';
import * as blackjack from '../services/blackjackService.js';
import * as keyboards from '../utils/keyboards.js';
import * as texts from '../utils/texts.js';

const takeCard = (bot, user) => async (query) => {
    try {
        if (user.userPassed) return bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –ø–∞—Å—Å–æ–≤–∞–ª–∏', show_alert: false });
        if (user.gameStarted == false) return bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å', show_alert: false });
        if (user.cards.player.length >= 5) return bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç', show_alert: false });
        if (blackjack.getSum(user.cards.player) > 21) return bot.answerCallbackQuery(query.id, { text: '–£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä –∫–∞—Ä—Ç.\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É!', show_alert: true });
        const userMove = await blackjack.userMove(user);

        await bot.sendMessage(user.id, `<i>üé¥ –í—ã –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç–µ –∫–∞—Ä—Ç—É:</i> [ <b>${userMove.card}</b> ]`, {
            parse_mode: 'HTML',
            reply_markup: await keyboards.userCards(userMove.userCards, userMove.userSum)
        })

        const moveMessage = await bot.sendMessage(user.id, `<b>–•–æ–¥ ${userMove.move}</b> - –•–æ–¥–∏—Ç –¥–∏–ª–ª–µ—Ä:\n\n<i>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –¥–∏–ª–ª–µ—Ä–∞...</i>`, { parse_mode: 'HTML' });

        setTimeout(async () => {
            try {
                const dealerMove = await blackjack.dealerMove(user);
                const dealerAction = dealerMove ? dealerMove.card ? '–î–∏–ª–ª–µ—Ä –≤–∑—è–ª –∫–∞—Ä—Ç—É' : '–î–∏–ª–ª–µ—Ä —Ä–µ—à–∏–ª –ø–∞—Å—Å–∞–Ω—É—Ç—å' : '–î–∏–ª–ª–µ—Ä —É–∂–µ –ø–∞—Å—Å–∞–Ω—É–ª';

                await bot.editMessageText(moveMessage.text + `\n\n‚úÖ <b>${dealerAction}</b>`,
                    { parse_mode: 'HTML', chat_id: user.id, message_id: moveMessage.message_id }
                );

                await bot.sendMessage(user.id, texts.gameText(user, userMove), {
                    parse_mode: 'HTML',
                    reply_markup: await keyboards.userMove(user.id)
                });
            } catch (error) {
                logger.error("takeCard", error);
            }
        }, user.dealerPassed ? 0 : 1500);
    } catch (error) {
        logger.error("takeCard", error);
    }
}

export { takeCard };